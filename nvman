#!/bin/bash

RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
CYAN=$(tput setaf 6)
BOLD=$(tput bold)
RESET=$(tput sgr0)

version="1.2.1"
config_path="/etc/nvman"
config="${config_path}/config"

error_print() {
    echo "${RED}${BOLD}Error:${RESET} $@"
}

if [[ $(id -u) -eq 0 ]]; then
    error_print "Don't run this script as root"
    exit 1
fi

sudo_run() {
    sudo -n true &> /dev/null 

    [[ $? -eq 1 ]] && 
    echo "${GREEN}==>${RESET} Privilege scalation needed"

    eval "sudo $@"
}

is_valid_service() {
    case $1 in 
        'bumblebee' | 'optimus')
            echo 'valid'
            ;;
        *)
            echo 'invalid'
            ;;
    esac
}

get_service_descriptor() {
    local service=$1
    case $service in
        'bumblebee')
            service='bumblebeed.service'
            ;;
        'optimus')
            service='optimus-manager.service'
            ;;
    esac

    echo $service
}

get_service_status() {
    echo "$(systemctl status $(get_service_descriptor $1) | awk '/Active/ {print $2}')"
}

is_service_enabled() {
    local status=$(systemctl status $(get_service_descriptor $1) | awk '/Loaded: loaded/ { print $4}')
    echo "${status::-1}"
}

enable_service() {
    local service=$1

    # Toggle service depending on input
    case $service in 
        'bumblebee')
            disable_service optimus
            ;;
        'optimus')
            disable_service bumblebee
            ;;
    esac 

    # If the service is already enabled, exit
    [[ $(is_service_enabled $service) = 'enabled' ]] && return 0
    sudo_run "systemctl enable $(get_service_descriptor $service)"
}

disable_service() {
    local service=$1

    # No toggling, both services can be disabled

    # If the service is already disabled, exit
    [[ $(is_service_enabled $service) = 'disabled' ]] && return 0
    sudo_run "systemctl disable $(get_service_descriptor $service)"
}


start_service() {
    local service=$1

    # If the service is already active, exit
    [[ $(get_service_status $service) = 'active' ]] && return 0

    # Check if willing to activate conflictive services
    case $service in 
        'bumblebee')
            [[ $(get_service_status optimus) = 'active' ]] && 
            error_print "Trying to activate conflicting services" && return 1
            ;;
        'optimus')
            [[ $(get_service_status bumblebee) = 'active' ]] && 
            error_print "Trying to activate conflicting services" && return 1
            ;;
    esac 

    # Start the service
    sudo_run "systemctl start $(get_service_descriptor $service)"
}

stop_service() {
    local service=$1

    # If the service is already inactive, exit
    [[ $(get_service_status $service) = 'inactive' ]] && return 0

    # Stop the service
    sudo_run "systemctl stop $(get_service_descriptor $service)"
}

set_default_service() {
    if [[ ! -d $config_path ]]; then
        sudo_run "mkdir -p $config_path"
    fi

    sudo_run "echo default = $1 > $config"
}

get_default_service() {
    if [[ ! -e $config ]]; then
        set_default_service optimus
    fi

    echo "$(cat $config | grep '\<default\>' | tr '=' ' ' | awk '{print $2}')"
}

get_optimus_mode() {
    echo "$(optimus-manager --print-mode | awk '/Current/ {print $5}')"
}

get_optimus_startup() {
    echo "$(optimus-manager --print-startup | awk '/Current/ {print $6}')"
}

print_status() {
    local optimus_color=$RED
    local bumblebee_color=$RED

    local optimus_status=$(get_service_status optimus)
    local bumblebee_status=$(get_service_status bumblebee)

    [[ $optimus_status = 'active' ]] && optimus_color=$GREEN
    [[ $bumblebee_status = 'active' ]] && bumblebee_color=$GREEN
    
    # Print optimus overall status
    echo -n "${BOLD}${WHITE}Optimus:${RESET} ${optimus_color}${optimus_status}${RESET} "
    echo    "${YELLOW}($(is_service_enabled optimus))${RESET}"
    # Print bumblebee overall status
    echo -n "${BOLD}${WHITE}Bumblebee:${RESET} ${bumblebee_color}${bumblebee_status}${RESET} "
    echo    "${YELLOW}($(is_service_enabled bumblebee))${RESET}"
    # Print default service
    echo    "${BOLD}${WHITE}Default service:${RESET} $(get_default_service)"

    [[ $(get_default_service) = 'optimus' ]] &&
    echo "Default startup for ${BOLD}${WHITE}optimus${RESET} is ${BOLD}${WHITE}$(get_optimus_startup)${RESET}"

    [[ $(is_service_enabled optimus) = 'enabled' ]] &&
    echo "Currently using ${BOLD}${WHITE}$(get_optimus_mode)${RESET} with ${BOLD}${WHITE}optimus${RESET}"
}

cmd=$1
arg=$2
shift
shift

case $cmd in 
    'run')
        # Check if optimus service is active and it's using nvidia, fatal error
        optimus_status=$(get_service_status optimus)
        if [[ $optimus_status = 'active' ]] && [[ $(get_optimus_mode) = 'nvidia' ]]; then
            error_print "Currently using nvidia with optimus!"
            exit 1
        fi

        echo "${CYAN}==>${RESET} Running $arg $@"

        # Toggle services
        stop_service optimus
        start_service bumblebee

        # Run with primusrun
        eval "primusrun $arg $@"
        ;;

    'switch')
        gpu=$arg

        # Toggle services
        stop_service bumblebee
        start_service optimus

        # Switch modes
        echo "${CYAN}==>${RESET} Switching to $gpu"
        sudo_run "sleep 1" # Do nothing but prompt message
        optimus-manager --switch $gpu --no-confirm &> /dev/null
        ;;

    'start')
        if [[ $(is_valid_service $arg) = 'invalid' ]]; then
            error_print "Unknown service '$arg'!"
            exit 1
        fi

        echo "${CYAN}==>${RESET} Starting service $arg"
        start_service $arg 
        ;; 

    'stop')
        if [[ $(is_valid_service $arg) = 'invalid' ]]; then
            error_print "Unknown service '$arg'!"
            exit 1
        fi

        echo "${CYAN}==>${RESET} Stopping service $arg"
        stop_service $arg 
        ;;

    'status' | '')
        print_status
        ;;

    'default')
        if [[ $(is_valid_service $arg) = 'invalid' ]]; then
            error_print "Unknown service '$arg'!"
            exit 1
        fi

        echo "${CYAN}==>${RESET} Setting default service to $arg"
        set_default_service $arg
        enable_service $arg
        ;;

    'startup')
        optimus_status=$(get_service_status optimus)
        if [[ $optimus_status = 'inactive' ]]; then 
            stop_service bumblebee
            start_service optimus
        fi

        echo "${CYAN}==>${RESET} Setting default startup to $arg"
        sudo_run "sleep 0" # Do nothing but prompt message
        optimus-manager --set-startup $arg &> /dev/null

        if [[ $optimus_status = 'inactive' ]]; then
            stop_service optimus
            start_service bumblebee 
        fi

        echo "${CYAN}==>${RESET} Default startup for ${BOLD}${WHITE}optimus${RESET} is ${BOLD}${WHITE}$(get_optimus_startup)${RESET}"
        ;;

    'inspector')
        if [[ $(is_service_enabled optimus) = 'enabled' ]] && 
            [[ $(is_service_enabled bumblebee) = 'enabled' ]]; then
            enable_service $(get_default_service)
            exit 0
        fi

        if [[ $(is_service_enabled optimus) = 'disabled' ]] && 
            [[ $(is_service_enabled bumblebee) = 'disabled' ]]; then
            enable_service $(get_default_service)
            exit 0
        fi

        ;;

    'help')
        echo "Usage: $0 command"
        echo "Version $version"
        echo ""
        echo "  run <command...>    Run the command with primusrun (using bumblebee)"
        echo "  switch <gpu>        Switch gpu with optimus-manager (using optimus)"
        echo "  default <service>   Set default service to start at boot (enable it)"
        echo "  startup <gpu>       Set startup for optimus service"
        echo "  start <service>     Manually start the service"
        echo "  stop <service>      Manually stop the service"
        echo "  status              Show the current status of both services"
        echo "  help                Show this help"
        ;;
    *)
        error_print "Unknown command '$cmd'!"
        exit 1
        ;;
esac
