#!/bin/bash

RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
CYAN=$(tput setaf 6)
BOLD=$(tput bold)
RESET=$(tput sgr0)

version="1.2.0"
config_path="/etc/nvman"
config="${config_path}/config"

error_print() {
    echo "${RED}${BOLD}Error:${RESET} $@"
}

if [[ $(id -u) -eq 0 ]]; then
    error_print "Don't run this script as root"
    exit 1
fi

sudo_run() {
    sudo -n true &> /dev/null 

    [[ $? -eq 1 ]] && 
    echo "${GREEN}==>${RESET} Privilege scalation needed"

    eval "sudo $@"
}

is_valid_service() {
    case $1 in 
        'bumblebee' | 'optimus')
            echo 'valid'
            ;;
        *)
            echo 'invalid'
            ;;
    esac
}

get_service() {
    local service=$1
    case $service in
        'bumblebee')
            service='bumblebeed.service'
            ;;
        'optimus')
            service='optimus-manager.service'
            ;;
    esac

    echo "$service"
}

service_status() {
    echo "$(systemctl status $(get_service $1) | awk '/Active/ {print $2}')"
}

service_enabled() {
    local status=$(systemctl status $(get_service $1) | awk '/Loaded/ { print $4}')
    echo "${status::-1}"
}

enable_service() {
    local service=$1

    # Toggle services
    case $service in 
        'bumblebee')
            disable_service optimus
            ;;
        'optimus')
            disable_service bumblebee
            ;;
    esac 

    # If the service is already enabled, exit
    [[ $(service_enabled $service) = 'enabled' ]] && return 0
    eval "$system enable $(get_service $service)"
    fancy_status
}

disable_service() {
    local service=$1

    # If the service is already disabled, exit
    [[ $(service_enabled $service) = 'disabled' ]] && return 0
    eval "$system disable $(get_service $service)"
}


start_service() {
    local service=$1
    local print_fancy=$2

    # If the service is already active, exit
    [[ $(service_status $service) = 'active' ]] && return 0

    # Check if willing to activate conflictive services
    case $service in 
        'bumblebee')
            [[ $(service_status optimus) = 'active' ]] && return 1
            ;;
        'optimus')
            [[ $(service_status bumblebee) = 'active' ]] && return 1
            ;;
    esac 

    # Start the service
    eval "$system start $(get_service $service)"
    [[ $print_fancy = 'fancy' ]] && fancy_status
}


stop_service() {
    local service=$1
    local print_fancy=$2

    # If the service is already inactive, exit
    [[ $(service_status $service) = 'inactive' ]] && return 0

    # Stop the service
    eval "$system stop $(get_service $service)"
    [[ $print_fancy = 'fancy' ]] && fancy_status
}

set_default() {
    if [[ ! -d $config_path ]]; then
        sudo mkdir -p $config_path
    fi

    sudo echo "default = $1" > $config
}

get_default() {
    if [[ ! -e $config ]]; then
        set_default optimus
    fi

    echo "$(cat $config | grep '\<default\>' | tr '=' ' ' | awk '{print $2}')"
}

optimus_mode() {
    echo "$(optimus-manager --print-mode | awk '{print $4}')"
}

optimus_startup() {
    echo "$(optimus-manager --print-startup | awk '{print $5}')"
}

fancy_status() {
    local optimus_color=$Red
    local bumblebee_color=$Red

    local optimus_status=$(service_status optimus)
    local bumblebee_status=$(service_status bumblebee)

    if [[ $optimus_status = 'active' ]]; then
        optimus_color=$Green
    fi

    if [[ $bumblebee_status = 'active' ]]; then 
        bumblebee_color=$Green
    fi

    echo -en "${BWhite}Optimus:${Reset} ${optimus_color}${optimus_status}${Reset} "
    echo -e  "${Yellow}($(service_enabled optimus))${Reset}"
    echo -en "${BWhite}Bumblebee:${Reset} ${bumblebee_color}${bumblebee_status}${Reset} "
    echo -e  "${Yellow}($(service_enabled bumblebee))${Reset}"
    echo -e "${BWhite}Default service:${Reset} $(get_default)"

    if [[ $(get_default) = 'optimus' ]]; then
        echo -e "Default startup for ${BWhite}optimus${Reset} is ${BWhite}$(optimus_startup)${Reset}"
    fi

    if [[ $optimus_status = 'active' ]]; then
        echo -e "Currently using ${BWhite}$(optimus_mode)${Reset} with ${BWhite}optimus${Reset}"
    fi
}

cmd=$1
arg=$2
shift
shift

case $cmd in 
    'run')
        # Check if optimus service is active and is using nvidia, fatal error
        optimus_status=$(service_status optimus)
        if [[ $optimus_status = 'active' ]] && [[ $(optimus_mode) = 'nvidia' ]]; then
            echo -e "${Red}Error:${Reset} Currently using nvidia with optimus"
            exit 1
        fi

        # Toggle services
        stop_service optimus
        start_service bumblebee

        # Run with primusrun
        eval "primusrun $arg $@"
        ;;

    'switch')
        if [[ $(id -u) != 0 ]]; then
            echo -en "${Yellow}It's recommended to run this sub command with sudo, in "
            echo -e  "order to avoid dialogs${Reset}"
        fi
        gpu=$arg

        # Toggle services
        stop_service bumblebee
        start_service optimus

        # Switch modes
        optimus-manager --switch $gpu --no-confirm
        ;;

    'start')
        if [[ $(id -u) != 0 ]]; then
            echo -en "${Yellow}It's recommended to run this sub command with sudo, in "
            echo -e  "order to avoid dialogs${Reset}"
        fi

        if [[ $(valid_service $arg) = 'invalid' ]]; then
            echo -e "${Red}Error:${Reset} Unrecognized service '$arg'!"
            exit 1
        fi

        start_service $arg fancy
        ;; 

    'stop')
        if [[ $(id -u) != 0 ]]; then
            echo -en "${Yellow}It's recommended to run this sub command with sudo, in "
            echo -e  "order to avoid dialogs${Reset}"
        fi

        if [[ $(valid_service $arg) = 'invalid' ]]; then
            echo -e "${Red}Error:${Reset} Unrecognized service '$arg'!"
            exit 1
        fi

        stop_service $arg fancy
        ;;

    'status' | '')
        fancy_status
        ;;

    'default')
        if [[ $(id -u) != 0 ]]; then
            echo -en "${Yellow}It's recommended to run this sub command with sudo, in "
            echo -e  "order to avoid dialogs${Reset}"
        fi

        if [[ $(valid_service $arg) = 'invalid' ]]; then
            echo -e "${Red}Error:${Reset} Unrecognized service '$arg'!"
            exit 1
        fi

        set_default $arg
        enable_service $arg
        ;;

    'startup')
        if [[ $(id -u) != 0 ]]; then
            echo -en "${Yellow}It's recommended to run this sub command with sudo, in "
            echo -e  "order to avoid dialogs${Reset}"
        fi

        optimus_status=$(service_status optimus)
        if [[ $optimus_status = 'inactive' ]]; then
            start_service optimus
        fi

        optimus-manager --set-startup $arg

        if [[ $optimus_status = 'inactive' ]]; then
            stop_service optimus
        fi

        fancy_status

        if [[ $(get_default) != 'optimus' ]]; then
            echo -e "Default startup for ${BWhite}optimus${Reset} is ${BWhite}$(optimus_startup)${Reset}"
        fi
        ;;

    'inspector')
        if [[ $(service_enabled optimus) = 'enabled' ]] && 
            [[ $(service_enabled bumblebee) = 'enabled' ]]; then
            enable_service $(get_default)
            exit 0
        fi

        if [[ $(service_enabled optimus) = 'disabled' ]] && 
            [[ $(service_enabled bumblebee) = 'disabled' ]]; then
            enable_service $(get_default)
            exit 0
        fi

        ;;

    'help')
        echo "Usage: $0 command"
        echo "Version $version"
        echo ""
        echo "  run <command...>    Run the command with primusrun (using bumblebee)"
        echo "  switch <gpu>        Switch gpu with optimus-manager (using optimus)"
        echo "  default <service>   Set default service to start at boot (enable it)"
        echo "  startup <gpu>       Set startup for optimus service"
        echo "  start <service>     Manually start the service"
        echo "  stop <service>      Manually stop the service"
        echo "  status              Show the current status of both services"
        echo "  help                Show this help"
        ;;
    *)
        error_print "Unknown command '$cmd'!"
        exit 1
        ;;
esac
